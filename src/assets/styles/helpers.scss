/*=========================================================
						              HELPERS
=========================================================*/




// Mixin itself
@mixin clearfix() {
  &::after {
    display: block;
    content: "";
    clear: both;
  }
}

/*
* Media queries
*/

@mixin smallPhone {
  @media (max-width: #{320px}  ) {
    @content;
  } 
}





@mixin phone {
  @media (max-width: #{420px - 1px}  ) {
    @content;
  } 
}


@mixin device600 {
  @media (max-width: #{600px - 1px}  ) {
    @content;
  } 
}

@mixin largePhone {
  @media (max-width: #{768px - 1px}  ) {
    @content;
  } 
}


@mixin tablet {
  @media (max-width: #{992px - 1px}  ) {
    @content;
  } 
}



@mixin desktop {
  @media (max-width: #{1200px - 1px} ) {
    @content;
  } 
}


@mixin largeDesktop {
  @media (max-width: #{1600px - 1px} ) {
    @content;
  } 
}


@mixin extraLargeDesktop {
  @media (max-width: #{1920px - 1px} ) {
    @content;
  } 
}

@mixin retina {
  @media (min-width: 1920px ) {
    @content;
  } 
}








//changes nav collapse break point to tablet
// @include tablet{
//     .navbar-header {
//         float: none;
//     }
//     .navbar-toggle {
//         display: block;
//     }

//     .navbar-collapse {
//         border-top: 1px solid transparent;
//         box-shadow: inset 0 1px 0 rgba(255,255,255,0.1);
//     }
//     .navbar-collapse.collapse {
//         display: none!important;
//     }
//     .navbar-nav {
//         float: none!important;
//         margin: 7.5px -15px;
//     }
//     .navbar-nav>li {
//         float: none;
//     }
//     .navbar-nav>li>a {
//         padding-top: 10px;
//         padding-bottom: 10px;
//     }
//     .navbar-text {
//         float: none;
//         margin: 15px 0;
//     }
//     /* since 3.1.0 */
//     .navbar-collapse.collapse.in { 
//         display: block!important;
//     }
//     .collapsing {
//         overflow: hidden!important;
//     }
// }

//center elements only on smaller screens
//must add a inline width property on the element for this to work
  @include tablet{
    .tabletCenterElement{
      margin-left: auto;
      margin-right: auto;
    }
  }

@include tablet{
    .tabletTextCenter{
        text-align: center;
    }
  }






  @mixin absoluteCenterAlign{

    position: absolute !important;
    top: 50% !important;
    left: 50% !important;
    transform: translate(-50%, -50%) !important;
    z-index: 99;

}

.overflow {
    overflow: auto;
}

.c-r-p {
  padding-right: 0;
}

.c-l-p {
  padding-left: 0;
}

.c-m {
  margin: 0;
}

.p-relative {
  position: relative;
}




/*
This .scss loop will create "margin helpers" and "padding helpers" for use in your web projects.
It will generate several classes such as:
.m-r-10 which gives margin-right 10 pixels.
.m-r-15 gives MARGIN to the RIGHT 15 pixels.
.m-t-15 gives MARGIN to the TOP 15 pixels and so on.
.p-b-5 gives PADDING to the BOTTOM of 5 pixels
.p-l-40 gives PADDING to the LEFT of 40 pixels
The first letter is "m" or "p" for MARGIN or PADDING
Second letter is "t", "b", "l", or "r" for TOP, BOTTOM, LEFT, or RIGHT
Third letter is the number of spacing in pixels. Adjust the amounts generated by editing the $spaceamounts variable below.
*/

$spaceamounts: (5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 75, 100); // Adjust this to include the pixel amounts you need.
$sides: (top, bottom, left, right); // Leave this variable alone

@each $space in $spaceamounts {
  @each $side in $sides {
    .m-#{str-slice($side, 0, 1)}-#{$space} {
      margin-#{$side}: #{$space}px !important;
    }
  
    .p-#{str-slice($side, 0, 1)}-#{$space} {
      padding-#{$side}: #{$space}px !important;
    }
  }
}


/*
  RUN GULP to generate the classes. Now you can use these helpers to customize spacing on HTML elements.
*/